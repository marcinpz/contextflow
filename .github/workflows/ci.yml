name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"

    - name: Install dependencies
      run: uv sync

    - name: Run linting
      run: uv run ruff check .

    - name: Run type checking
      run: uv run mypy .

    - name: Run tests
      run: uv run pytest --cov=src --cov-report=xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v5
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  integration-test:
    runs-on: ubuntu-latest
    services:
      neo4j:
        image: neo4j:5.26-community
        ports:
          - 7474:7474
          - 7687:7687
        env:
          NEO4J_AUTH: neo4j/password
          NEO4J_PLUGINS: '["graph-data-science"]'
        options: >-
          --health-cmd "cypher-shell -u neo4j -p password 'MATCH () RETURN count(*) limit 1'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"

    - name: Install dependencies
      run: uv sync

    - name: Wait for Neo4j
      run: |
        timeout 60 bash -c 'until curl -f http://localhost:7474; do sleep 2; done'

    - name: Run integration tests
      run: uv run pytest tests/integration/ -v

  security:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Run safety check
      run: |
        pip install safety
        safety check --full-report

    - name: Run bandit security linter
      run: |
        pip install bandit
        bandit -r src/ -f json -o bandit-report.json || true
        cat bandit-report.json

  docker-build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: contextflow:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

  pr-validation:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
    - uses: actions/checkout@v4

    - name: Check PR description
      run: |
        if [[ "${{ github.event.pull_request.body }}" == "" ]]; then
          echo "PR description is required"
          exit 1
        fi

    - name: Check PR size
      run: |
        # Check if PR has too many files changed
        CHANGED_FILES=$(git diff --name-only HEAD~1 | wc -l)
        if [ "$CHANGED_FILES" -gt 50 ]; then
          echo "PR is too large ($CHANGED_FILES files). Consider splitting into smaller PRs."
          exit 1
        fi

    - name: Validate commit messages
      run: |
        # Check commit message format
        git log --oneline -n 10 | while read commit; do
          if ! echo "$commit" | grep -qE "^(feat|fix|docs|style|refactor|test|chore|perf|ci|build|revert)(\(.+\))?: .{1,}"; then
            echo "Commit message format is invalid: $commit"
            echo "Expected format: type(scope): description"
            exit 1
          fi
        done